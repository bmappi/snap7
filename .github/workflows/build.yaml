name: C++ Build

on:
  push:
    branches:
      - main  # Or whichever branch you want to trigger the build on
  pull_request:
    branches:
      - main  # Or whichever branch you want to trigger builds for PRs

jobs:
  setup-msbuild:
    runs-on: windows-latest  # Use a Windows runner

    strategy:
      matrix:
        configuration: [Release]  # Build Debug and Release : [Debug, Release]
        platform: [x64]             # Build for both x86 and x64 : [x86, x64]

    steps:
      - name: Restore Visual Studio Build Tools
        uses: actions/cache/restore@v4
        with:
          path: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools"
          key: ${{ runner.os }}-vs2019-buildtools
      
      - name: Set up MSBuild
        run: |
          if (-not (Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools")) {
            # If Build Tools are not found in cache, install them
            choco install visualstudio2019buildtools --package-parameters "--includeRecommended --add Microsoft.VisualStudio.Workload.VCTools" --yes
            choco install visualcpp-build-tools --yes
          }
          
          # Ensure VS2019 MSBuild is available
          $env:MSBuildPath="C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin"
          echo "MSBuild Path: $env:MSBuildPath"
          echo "Add MSBuild to Path"
          $env:PATH="$env:MSBuildPath;$env:PATH"
      
      - name: Save Visual Studio Build Tools
        uses: actions/cache/save@v4
        with:
          path: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools"
          key: ${{ runner.os }}-vs2019-buildtools

  build:
    needs: setup-msbuild  # This job depends on the success of the setup-msbuild job
    runs-on: windows-latest  # Use a Windows runner for the build job

    strategy:
      matrix:
        configuration: [Release]  # Build Debug and Release : [Debug, Release]
        platform: [x64]             # Build for both x86 and x64 : [x86, x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List Files
        run: ls -R

      - name: Build the solution using full path to MSBuild
        run: |
          echo "Building the solution..."
          & "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin\msbuild.exe" build/windows/VS2019/VS2019.sln /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }} /p:BuildProjectReferences=true /p:OutDir=build_output/
      
      - name: Build DLL in Debug and Release (x86, x64)
        run: |
          & "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin\msbuild.exe" build/windows/VS2019/VS2019.sln /p:Configuration=Debug /p:Platform=x86 /p:OutDir=build_output/x86_debug/
          & "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin\msbuild.exe" build/windows/VS2019/VS2019.sln /p:Configuration=Release /p:Platform=x86 /p:OutDir=build_output/x86_release/
          & "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin\msbuild.exe" build/windows/VS2019/VS2019.sln /p:Configuration=Debug /p:Platform=x64 /p:OutDir=build_output/x64_debug/
          & "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin\msbuild.exe" build/windows/VS2019/VS2019.sln /p:Configuration=Release /p:Platform=x64 /p:OutDir=build_output/x64_release/
      
      - name: List Files
        run: ls -R

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: built-dlls
          path: ${{ github.workspace }}/build_output